library(glue)
library(gtools)
printf <- defmacro(str, expr = {print(glue(str))})
data = read.csv("optdigits.csv")
colnames(data) <- c(1:64, "y")
n = dim(data)[1]
set.seed(12345)
id = sample(1:n, floor(n*0.5))
data.train = data[id,]
id1 = setdiff(1:n, id)
set.seed(12345)
id2 = sample(id1, floor(n*0.25))
data.valid = data[id2,]
id3 = setdiff(id1,id2)
data.test = data[id3,]
model.kknn <- kknn::kknn(as.factor(y)~.,train, train, k=30, kernel="rectangular")
table(model.kknn)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
View(data.test)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
data.train
# -----------------------------------------------------------
# Assignment 1. Handwritten digit recognition with K-means
# -----------------------------------------------------------
library(glue)
library(gtools)
printf <- defmacro(str, expr = {print(glue(str))})
misclass <- function(x, x_){
n=length(x)
return(1-sum(diag(table(x,x_)))/n)
}
cross_entropy_loss <- function(y,y_hat){
return((-1/length(y))*sum(y*log(y_hat)))
}
data = read.csv("optdigits.csv")
colnames(data) <- c(1:64, "y")
n = dim(data)[1]
set.seed(12345)
id = sample(1:n, floor(n*0.5))
data.train = data[id,]
id1 = setdiff(1:n, id)
set.seed(12345)
id2 = sample(id1, floor(n*0.25))
data.valid = data[id2,]
id3 = setdiff(id1,id2)
data.test = data[id3,]
for (k in 1:30){
model.kknn <- kknn::kknn(as.factor(y)~.,data.train, data.test, k=30, kernel="rectangular")
model.kknn.fit <- fitted(model.kknn)
print(misclass(data.test$y, model.kknn.fit))
}
# Grab all cases where the model thinks there is a 8.
all_eights <- which(data.train$y == 8)
our_guesses = c()
for(i in 1:length(all_eights)){
our_guesses[i] = model.kknn$prob[all_eights[i], "8"]
}
hardest_train_cases <- order(our_guesses, decreasing = FALSE)[1:3]
easiest_train_cases <- order(our_guesses , decreasing = TRUE)[1:2]
all_eights[hardest_train_cases]
all_eights[easiest_train_cases]
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
source("~/Programs/repositories/uni/university-courses/tdde01-machine-learning/lab1/asg1.r", echo=TRUE)
